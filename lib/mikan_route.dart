// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************
// fast mode: true
// **************************************************************************
// ignore_for_file: prefer_const_literals_to_create_immutables,unused_local_variable,unused_import,unnecessary_import,unused_shown_name,implementation_imports,duplicate_import
import 'package:ff_annotation_route_library/ff_annotation_route_library.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';

import '../../model/record_item.dart';
import '../../model/season.dart';
import '../../model/season_gallery.dart';
import '../../model/subgroup.dart';
import '../../model/year_season.dart';
import 'ui/pages/announcement.dart';
import 'ui/pages/bangumi.dart';
import 'ui/pages/fonts.dart';
import 'ui/pages/forgot_password.dart';
import 'ui/pages/home.dart';
import 'ui/pages/license.dart';
import 'ui/pages/license_detail.dart';
import 'ui/pages/login.dart';
import 'ui/pages/recent_subscribed.dart';
import 'ui/pages/record.dart';
import 'ui/pages/register.dart';
import 'ui/pages/search.dart';
import 'ui/pages/season_bangumi.dart';
import 'ui/pages/single_season.dart';
import 'ui/pages/splash.dart';
import 'ui/pages/subgroup.dart';
import 'ui/pages/subscribed_season.dart';

/// Get route settings base on route name, auto generated by https://github.com/fluttercandies/ff_annotation_route
FFRouteSettings getRouteSettings({
  required String name,
  Map<String, dynamic>? arguments,
  PageBuilder? notFoundPageBuilder,
}) {
  final Map<String, dynamic> safeArguments =
      arguments ?? const <String, dynamic>{};
  switch (name) {
    case '/announcements':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => Announcements(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/bangumi':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          bangumiId: asT<String>(
            safeArguments['bangumiId'],
          )!,
          cover: asT<String>(
            safeArguments['cover'],
          )!,
          heroTag: asT<String>(
            safeArguments['heroTag'],
          )!,
          title: asT<String?>(
            safeArguments['title'],
          ),
        ),
      );
    case '/bangumi/season':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SeasonBangumi(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          years: asT<List<YearSeason>>(
            safeArguments['years'],
          )!,
        ),
      );
    case '/fonts':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => Fonts(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/forget-password':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => ForgotPasswordPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/index':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => HomePage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/license':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => LicenseList(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/license/detail':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => LicenseDetail(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          packageName: asT<String>(
            safeArguments['packageName'],
          )!,
          licenseEntries: asT<List<LicenseEntry>>(
            safeArguments['licenseEntries'],
          )!,
        ),
      );
    case '/login':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => LoginPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/record':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => Record(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          url: asT<String>(
            safeArguments['url'],
          )!,
        ),
      );
    case '/register':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => RegisterPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/search':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => Search(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/season':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SingleSeasonPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          season: asT<Season>(
            safeArguments['season'],
          )!,
        ),
      );
    case '/splash':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SplashPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/subgroup':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SubgroupPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          subgroup: asT<Subgroup>(
            safeArguments['subgroup'],
          )!,
        ),
      );
    case '/subscribed/recent':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => RecentSubscribedPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          loaded: asT<List<RecordItem>>(
            safeArguments['loaded'],
          )!,
        ),
      );
    case '/subscribed/season':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SubscribedSeasonPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          years: asT<List<YearSeason>>(
            safeArguments['years'],
          )!,
          galleries: asT<List<SeasonGallery>>(
            safeArguments['galleries'],
          )!,
        ),
      );
    default:
      return FFRouteSettings(
        name: FFRoute.notFoundName,
        routeName: FFRoute.notFoundRouteName,
        builder: notFoundPageBuilder ?? () => Container(),
      );
  }
}
